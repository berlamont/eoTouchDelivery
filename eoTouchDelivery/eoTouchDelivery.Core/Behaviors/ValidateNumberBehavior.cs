using System.Linq;
using Xamarin.Forms;

namespace eoTouchDelivery.Core.Behaviors
{
	public class ValidateNumberBehavior : Behavior<Entry>
	{
	    /// <summary>
	    ///     The attach behavior property
	    /// </summary>
	    /// <autogeneratedoc />
	    public static readonly BindableProperty AttachBehaviorProperty =
			BindableProperty.CreateAttached("AttachBehavior", typeof(bool), typeof(ValidateNumberBehavior), false, propertyChanged: OnAttachBehaviorChanged);

		public static bool GetAttachBehavior(BindableObject view) => (bool) view.GetValue(AttachBehaviorProperty);

	    /// <summary>
	    ///     Sets the attach behavior.
	    /// </summary>
	    /// <param name="view">The view.</param>
	    /// <param name="value">if set to <c>true</c> [value].</param>
	    /// <autogeneratedoc />
	    public static void SetAttachBehavior(BindableObject view, bool value)
		{
			view.SetValue(AttachBehaviorProperty, value);
		}

	    /// <summary>
	    ///     Called when [attach behavior changed].
	    /// </summary>
	    /// <param name="view">The view.</param>
	    /// <param name="oldValue">The old value.</param>
	    /// <param name="newValue">The new value.</param>
	    /// <autogeneratedoc />
	    static void OnAttachBehaviorChanged(BindableObject view, object oldValue, object newValue)
		{
			var entry = view as Entry;
			if (entry == null)
				return;

			var attachBehavior = (bool) newValue;
			if (attachBehavior)
			{
				entry.Behaviors.Add(new ValidateNumberBehavior());
			}
			else
			{
				var toRemove = entry.Behaviors.FirstOrDefault(b => b is ValidateNumberBehavior);
				if (toRemove != null)
					entry.Behaviors.Remove(toRemove);
			}
		}

	    /// <summary>
	    ///     Called when [attached to].
	    /// </summary>
	    /// <param name="entry">The entry.</param>
	    /// <autogeneratedoc />
	    protected override void OnAttachedTo(Entry entry)
		{
			entry.TextChanged += OnEntryTextChanged;
			base.OnAttachedTo(entry);
		}

	    /// <summary>
	    ///     Called when [detaching from].
	    /// </summary>
	    /// <param name="entry">The entry.</param>
	    /// <autogeneratedoc />
	    protected override void OnDetachingFrom(Entry entry)
		{
			entry.TextChanged -= OnEntryTextChanged;
			base.OnDetachingFrom(entry);
		}

	    /// <summary>
	    ///     Handles the <see cref="E:EntryTextChanged" /> event.
	    /// </summary>
	    /// <param name="sender">The sender.</param>
	    /// <param name="args">The <see cref="TextChangedEventArgs" /> instance containing the event data.</param>
	    /// <autogeneratedoc />
	    static void OnEntryTextChanged(object sender, TextChangedEventArgs args)
		{
			double result;
			var isValid = double.TryParse(args.NewTextValue, out result);
			((Entry) sender).TextColor = isValid ? Color.Default : Color.Red;
		}
	}
}